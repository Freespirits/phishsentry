"""Pydantic schemas for the scoring API."""

from __future__ import annotations

from datetime import datetime
from typing import Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, HttpUrl, conlist, confloat, constr


class ExtensionArtifact(BaseModel):
    """Metadata describing artifacts collected by the browser extension."""

    artifact_id: constr(strip_whitespace=True, min_length=1) = Field(
        ...,
        description="Stable identifier for correlating the artifact with storage or follow-up requests.",
        example="art-01HZX4TB0MG1F1Q8G0Y8X2JJSH",
    )
    kind: constr(strip_whitespace=True, min_length=1) = Field(
        ...,
        description=(
            "Type of artifact captured by the extension (e.g. screenshot, dom_snapshot, "
            "network_capture)."
        ),
        example="screenshot",
    )
    storage_url: Optional[HttpUrl] = Field(
        None,
        description=(
            "Optional pre-signed URL pointing to the artifact payload. The URL may expire "
            "and should only be used for immediate ingestion."
        ),
    )


class ExtensionEventContext(BaseModel):
    """Rich context supplied by the browser extension alongside a score request."""

    schema_version: constr(strip_whitespace=True, min_length=1) = Field(
        ...,
        description="Version identifier of the telemetry payload schema emitted by the extension.",
        example="extension.event.v1",
    )
    event_id: constr(strip_whitespace=True, min_length=1) = Field(
        ...,
        description="Unique identifier for the telemetry event generated by the extension.",
        example="evt_6c3a7e5f2a5f48d9b6c75a0c4b7b8b16",
    )
    observed_at: datetime = Field(
        ...,
        description="Timestamp recorded by the browser (UTC) when the suspicious URL was observed.",
        example="2024-05-19T17:21:54.219Z",
    )
    page_url: HttpUrl = Field(
        ...,
        description="The full URL of the frame that triggered the phishing heuristics.",
        example="https://login.example.com/reset",
    )
    top_level_url: Optional[HttpUrl] = Field(
        None,
        description="Top-level page URL hosting the frame that initiated the request.",
        example="https://workspace.example.com/inbox",
    )
    tab_id: constr(strip_whitespace=True, min_length=1) = Field(
        ...,
        description="Browser tab identifier so downstream systems can de-duplicate events.",
        example="92",
    )
    frame_id: constr(strip_whitespace=True, min_length=1) = Field(
        ...,
        description="Browser frame identifier associated with the event.",
        example="0",
    )
    client_version: constr(strip_whitespace=True, min_length=1) = Field(
        ...,
        description="Browser extension version reporting the telemetry event.",
        example="1.3.0",
    )
    locale: Optional[constr(strip_whitespace=True, min_length=2, max_length=10)] = Field(
        None,
        description="IETF language tag provided by the browser (e.g. en-US).",
        example="en-US",
    )
    artifacts: List[ExtensionArtifact] = Field(
        default_factory=list,
        description="Collection of artifact references captured alongside the event.",
    )
    signals: Dict[str, Optional[str]] = Field(
        default_factory=dict,
        description="Additional lightweight signals generated locally by the extension heuristics.",
        example={"keyword_match": "login"},
    )


class ScoreRequest(BaseModel):
    """Incoming request for URL scoring."""

    model_config = ConfigDict(populate_by_name=True)

    url: HttpUrl = Field(..., description="URL to evaluate for phishing risk")
    timeout_seconds: Optional[confloat(gt=0)] = Field(
        None,
        description="Optional timeout override for downstream scoring engine.",
        example=2.5,
    )
    event_context: Optional[ExtensionEventContext] = Field(
        None,
        alias="event",
        description=(
            "Optional telemetry payload emitted by the browser extension. This allows the API "
            "to enrich scoring decisions with client-side context while keeping the core URL "
            "field available for legacy integrations."
        ),
    )


class ScoreResponse(BaseModel):
    """Response returned by the scoring endpoint."""

    risk_score: confloat(ge=0, le=1) = Field(
        ..., description="Normalized phishing risk score between 0 and 1."
    )
    reasons: conlist(str, min_length=1) = Field(
        ..., description="Human-readable explanations supporting the risk score."
    )
    signals: Dict[str, Optional[str]] = Field(
        default_factory=dict,
        description="Raw detection signals that contributed to the assessment.",
    )


class ErrorResponse(BaseModel):
    """Error response payload."""

    detail: str
